From 052a5ed8e6aa8801d96f04b3eea94a06a4e1d699 Mon Sep 17 00:00:00 2001
From: Tomas Jelinek <tojeline@redhat.com>
Date: Tue, 8 Mar 2016 15:20:42 +0100
Subject: [PATCH] bz-1317812-add config settings for SSL options and ciphers

---
 pcsd/pcsd.conf | 10 ++++++++++
 pcsd/ssl.rb    | 46 +++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 53 insertions(+), 3 deletions(-)

diff --git a/pcsd/pcsd.conf b/pcsd/pcsd.conf
index 80006f2..2c99743 100644
--- a/pcsd/pcsd.conf
+++ b/pcsd/pcsd.conf
@@ -1,6 +1,16 @@
 # pcsd configuration file
 # Set PCSD_DEBUG to true for advanced pcsd debugging information
 PCSD_DEBUG=false
+
+# SSL settings
+# set SSL options delimited by ',' character
+# list of valid options can be obtained by running
+# ruby -e 'require "openssl"; puts OpenSSL::SSL.constants.grep /^OP_/'
+#PCSD_SSL_OPTIONS='OP_NO_SSLv2,OP_NO_SSLv3,OP_NO_TLSv1,OP_NO_TLSv1_1'
+# set SSL ciphers
+#PCSD_SSL_CIPHERS='DEFAULT:!RC4:!3DES:@STRENGTH!'
+
+# Do not change
 RACK_ENV=production
 # Set DISABLE_GUI to true to disable GUI frontend in pcsd
 DISABLE_GUI=true
diff --git a/pcsd/ssl.rb b/pcsd/ssl.rb
index 2858574..38dd25b 100644
--- a/pcsd/ssl.rb
+++ b/pcsd/ssl.rb
@@ -26,6 +26,46 @@ def generate_cert_key_pair(server_name)
   return crt, key
 end
 
+def get_ssl_options()
+  default_options = (
+    OpenSSL::SSL::OP_NO_SSLv2 | OpenSSL::SSL::OP_NO_SSLv3 |
+    OpenSSL::SSL::OP_NO_TLSv1 | 268435456
+  )
+  if ENV['PCSD_SSL_OPTIONS']
+    options = 0
+    ENV['PCSD_SSL_OPTIONS'].split(',').each { |op|
+      op_cleaned = op.strip()
+      begin
+        if not op_cleaned.start_with?('OP_')
+          raise NameError.new('options must start with OP_')
+        end
+        op_constant = OpenSSL::SSL.const_get(op_cleaned)
+        options |= op_constant
+      rescue NameError => e
+        $logger.error(
+          "SSL configuration error '#{e}', unknown SSL option '#{op}'"
+        )
+        exit
+      rescue => e
+        $logger.error("SSL configuration error '#{e}'")
+        exit
+      end
+    }
+    return options
+  end
+  return default_options
+end
+
+def run_server(server, webrick_options)
+  ciphers = 'DEFAULT:!RC4:!3DES:@STRENGTH!'
+  ciphers = ENV['PCSD_SSL_CIPHERS'] if ENV['PCSD_SSL_CIPHERS']
+  # no need to validate ciphers, ssl context will validate them for us
+
+  server.run(Sinatra::Application, webrick_options) { |server_instance|
+    server_instance.ssl_context.ciphers = ciphers
+  }
+end
+
 if not File.exists?(CRT_FILE) or not File.exists?(KEY_FILE)
   crt, key = generate_cert_key_pair(server_name)
   File.open(CRT_FILE, 'w',0700) {|f| f.write(crt)}
@@ -55,7 +95,7 @@ webrick_options = {
   :SSLCertificate     => OpenSSL::X509::Certificate.new(crt),
   :SSLPrivateKey      => OpenSSL::PKey::RSA.new(key),
   :SSLCertName        => [[ "CN", server_name ]],
-  :SSLOptions         => OpenSSL::SSL::OP_NO_SSLv2 | OpenSSL::SSL::OP_NO_SSLv3,
+  :SSLOptions         => get_ssl_options(),
 }
 
 server = ::Rack::Handler::WEBrick
@@ -79,9 +119,9 @@ end
 
 require 'pcsd'
 begin
-  server.run(Sinatra::Application, webrick_options)
+  run_server(server, webrick_options)
 rescue Errno::EAFNOSUPPORT
   webrick_options[:BindAddress] = '0.0.0.0'
   webrick_options[:Host] = '0.0.0.0'
-  server.run(Sinatra::Application, webrick_options)
+  run_server(server, webrick_options)
 end
-- 
1.8.3.1

