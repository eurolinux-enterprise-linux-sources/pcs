From 5525c28ddd285d75b237ea6ac2e1d6b23391a29f Mon Sep 17 00:00:00 2001
From: Ivan Devat <idevat@redhat.com>
Date: Tue, 22 Nov 2016 17:41:17 +0100
Subject: [PATCH] lib: check for minimal version when upgrading CIB

---
 pcs/cli/common/console_report.py    |   3 +-
 pcs/lib/cib/tools.py                |  77 +++++++-----
 pcs/lib/commands/test/test_alert.py |  19 ++-
 pcs/lib/env.py                      |   9 +-
 pcs/lib/pacemaker.py                |  21 ++--
 pcs/test/test_lib_cib_tools.py      | 239 ++++++++++++++++++++++++++++--------
 pcs/test/test_lib_env.py            |   7 +-
 pcs/test/test_lib_pacemaker.py      |  21 ----
 8 files changed, 269 insertions(+), 127 deletions(-)

diff --git a/pcs/cli/common/console_report.py b/pcs/cli/common/console_report.py
index 643550f..8a99d39 100644
--- a/pcs/cli/common/console_report.py
+++ b/pcs/cli/common/console_report.py
@@ -679,9 +679,8 @@ CODE_TO_MESSAGE_BUILDER_MAP = {
         .format(**info)
     ,
 
-    codes.CIB_UPGRADE_SUCCESSFUL: lambda info:
+    codes.CIB_UPGRADE_SUCCESSFUL:
         "CIB has been upgraded to the latest schema version."
-        .format(**info)
     ,
 
     codes.CIB_UPGRADE_FAILED: lambda info:
diff --git a/pcs/lib/cib/tools.py b/pcs/lib/cib/tools.py
index 06a9671..3f269d2 100644
--- a/pcs/lib/cib/tools.py
+++ b/pcs/lib/cib/tools.py
@@ -14,8 +14,10 @@ from pcs import settings
 from pcs.common.tools import join_multilines
 from pcs.lib import reports
 from pcs.lib.errors import LibraryError
+from pcs.lib.pacemaker import get_cib_xml, parse_cib_xml
 from pcs.lib.pacemaker_values import validate_id
 
+
 def does_id_exist(tree, check_id):
     """
     Checks to see if id exists in the xml dom passed
@@ -175,7 +177,7 @@ def get_pacemaker_version_by_which_cib_was_validated(cib):
     )
 
 
-def upgrade_cib(cib, runner):
+def upgrade_cib_file(cib, runner):
     """
     Upgrade CIB to the latest schema of installed pacemaker. Returns upgraded
     CIB as string.
@@ -189,31 +191,40 @@ def upgrade_cib(cib, runner):
         temp_file = tempfile.NamedTemporaryFile("w+", suffix=".pcs")
         temp_file.write(etree.tostring(cib).decode())
         temp_file.flush()
-        stdout, stderr, retval = runner.run(
-            [
-                os.path.join(settings.pacemaker_binaries, "cibadmin"),
-                "--upgrade",
-                "--force"
-            ],
-            env_extend={"CIB_file": temp_file.name}
-        )
-
-        if retval != 0:
-            temp_file.close()
-            raise LibraryError(
-                reports.cib_upgrade_failed(join_multilines([stderr, stdout]))
-            )
-
+        upgrade_cib(runner, temp_file.name)
         temp_file.seek(0)
-        return etree.fromstring(temp_file.read())
-    except (EnvironmentError, etree.XMLSyntaxError, etree.DocumentInvalid) as e:
+        return temp_file.read()
+    except EnvironmentError as e:
         raise LibraryError(reports.cib_upgrade_failed(str(e)))
     finally:
         if temp_file:
             temp_file.close()
 
 
-def ensure_cib_version(runner, cib, version):
+def upgrade_cib(runner, cib_file_path=None):
+    """
+    Upgrade CIB to the latest schema available locally or clusterwise.
+    CommandRunner runner
+    string cib_file_path run on specified file or live cluster if None
+    """
+    environment = dict()
+    if cib_file_path:
+        environment["CIB_file"] = cib_file_path
+    stdout, stderr, retval = runner.run(
+        [
+            os.path.join(settings.pacemaker_binaries, "cibadmin"),
+            "--upgrade",
+            "--force",
+        ],
+        env_extend=environment
+    )
+    if retval != 0:
+        raise LibraryError(
+            reports.cib_upgrade_failed(join_multilines([stderr, stdout]))
+        )
+
+
+def ensure_cib_version(runner, cib, version, live):
     """
     This method ensures that specified cib is verified by pacemaker with
     version 'version' or newer. If cib doesn't correspond to this version,
@@ -221,23 +232,29 @@ def ensure_cib_version(runner, cib, version):
     Returns cib which was verified by pacemaker version 'version' or later.
     Raises LibraryError on any failure.
 
-    runner -- CommandRunner
-    cib -- cib tree
-    version -- tuple of integers (<major>, <minor>, <revision>)
+    CommandRunner runner
+    etree cib cib tree
+    tuple version tuple of integers (<major>, <minor>, <revision>)
+    bool live upgrade in a live cluster or not
     """
-    current_version = get_pacemaker_version_by_which_cib_was_validated(
-        cib
-    )
+    current_version = get_pacemaker_version_by_which_cib_was_validated(cib)
     if current_version >= version:
         return None
 
-    upgraded_cib = upgrade_cib(cib, runner)
-    current_version = get_pacemaker_version_by_which_cib_was_validated(
-        upgraded_cib
-    )
+    if live:
+        upgrade_cib(runner)
+        new_cib_xml = get_cib_xml(runner)
+    else:
+        new_cib_xml = upgrade_cib_file(cib, runner)
+
+    try:
+        new_cib = parse_cib_xml(new_cib_xml)
+    except (etree.XMLSyntaxError, etree.DocumentInvalid) as e:
+        raise LibraryError(reports.cib_upgrade_failed(str(e)))
 
+    current_version = get_pacemaker_version_by_which_cib_was_validated(new_cib)
     if current_version >= version:
-        return upgraded_cib
+        return new_cib
 
     raise LibraryError(reports.unable_to_upgrade_cib_to_required_version(
         current_version, version
diff --git a/pcs/lib/commands/test/test_alert.py b/pcs/lib/commands/test/test_alert.py
index 440c230..1bec517 100644
--- a/pcs/lib/commands/test/test_alert.py
+++ b/pcs/lib/commands/test/test_alert.py
@@ -26,7 +26,7 @@ from pcs.lib.external import CommandRunner
 import pcs.lib.commands.alert as cmd_alert
 
 
-@mock.patch("pcs.lib.cib.tools.upgrade_cib")
+@mock.patch("pcs.lib.env.ensure_cib_version")
 class CreateAlertTest(TestCase):
     def setUp(self):
         self.mock_log = mock.MagicMock(spec_set=logging.Logger)
@@ -36,7 +36,7 @@ class CreateAlertTest(TestCase):
             self.mock_log, self.mock_rep, cib_data="<cib/>"
         )
 
-    def test_no_path(self, mock_upgrade_cib):
+    def test_no_path(self, mock_ensure_cib_version):
         assert_raise_library_error(
             lambda: cmd_alert.create_alert(
                 self.mock_env, None, None, None, None
@@ -47,18 +47,17 @@ class CreateAlertTest(TestCase):
                 {"option_name": "path"}
             )
         )
-        self.assertEqual(0, mock_upgrade_cib.call_count)
+        mock_ensure_cib_version.assert_not_called()
 
-    def test_upgrade_needed(self, mock_upgrade_cib):
-        self.mock_env._push_cib_xml(
-            """
+    def test_upgrade_needed(self, mock_ensure_cib_version):
+        original_cib_xml = """
             <cib validate-with="pacemaker-2.4.1">
                 <configuration>
                 </configuration>
             </cib>
-            """
-        )
-        mock_upgrade_cib.return_value = etree.XML(
+        """
+        self.mock_env._push_cib_xml(original_cib_xml)
+        mock_ensure_cib_version.return_value = etree.XML(
             """
             <cib validate-with="pacemaker-2.5.0">
                 <configuration>
@@ -109,7 +108,7 @@ class CreateAlertTest(TestCase):
             """,
             self.mock_env._get_cib_xml()
         )
-        self.assertEqual(1, mock_upgrade_cib.call_count)
+        self.assertEqual(1, mock_ensure_cib_version.call_count)
 
 
 class UpdateAlertTest(TestCase):
diff --git a/pcs/lib/env.py b/pcs/lib/env.py
index f453be6..91f3968 100644
--- a/pcs/lib/env.py
+++ b/pcs/lib/env.py
@@ -109,7 +109,10 @@ class LibraryEnvironment(object):
         cib = get_cib(self._get_cib_xml())
         if minimal_version is not None:
             upgraded_cib = ensure_cib_version(
-                self.cmd_runner(), cib, minimal_version
+                self.cmd_runner(),
+                cib,
+                minimal_version,
+                self.is_cib_live
             )
             if upgraded_cib is not None:
                 cib = upgraded_cib
@@ -118,9 +121,7 @@ class LibraryEnvironment(object):
 
     def _push_cib_xml(self, cib_data):
         if self.is_cib_live:
-            replace_cib_configuration_xml(
-                self.cmd_runner(), cib_data, self._cib_upgraded
-            )
+            replace_cib_configuration_xml(self.cmd_runner(), cib_data)
             if self._cib_upgraded:
                 self._cib_upgraded = False
                 self.report_processor.process(reports.cib_upgrade_successful())
diff --git a/pcs/lib/pacemaker.py b/pcs/lib/pacemaker.py
index 6747b22..f306276 100644
--- a/pcs/lib/pacemaker.py
+++ b/pcs/lib/pacemaker.py
@@ -55,27 +55,34 @@ def get_cib_xml(runner, scope=None):
             )
     return stdout
 
+def parse_cib_xml(xml):
+    return etree.fromstring(xml)
+
 def get_cib(xml):
     try:
-        return etree.fromstring(xml)
+        return parse_cib_xml(xml)
     except (etree.XMLSyntaxError, etree.DocumentInvalid):
         raise LibraryError(reports.cib_load_error_invalid_format())
 
-def replace_cib_configuration_xml(runner, xml, cib_upgraded=False):
-    cmd = [__exec("cibadmin"), "--replace",  "--verbose", "--xml-pipe"]
-    if not cib_upgraded:
-        cmd += ["--scope", "configuration"]
+def replace_cib_configuration_xml(runner, xml):
+    cmd = [
+        __exec("cibadmin"),
+        "--replace",
+        "--verbose",
+        "--xml-pipe",
+        "--scope", "configuration",
+    ]
     stdout, stderr, retval = runner.run(cmd, stdin_string=xml)
     if retval != 0:
         raise LibraryError(reports.cib_push_error(stderr, stdout))
 
-def replace_cib_configuration(runner, tree, cib_upgraded=False):
+def replace_cib_configuration(runner, tree):
     #etree returns bytes: b'xml'
     #python 3 removed .encode() from bytes
     #run(...) calls subprocess.Popen.communicate which calls encode...
     #so here is bytes to str conversion
     xml = etree.tostring(tree).decode()
-    return replace_cib_configuration_xml(runner, xml, cib_upgraded)
+    return replace_cib_configuration_xml(runner, xml)
 
 def get_local_node_status(runner):
     try:
diff --git a/pcs/test/test_lib_cib_tools.py b/pcs/test/test_lib_cib_tools.py
index 8c85b5b..5361a75 100644
--- a/pcs/test/test_lib_cib_tools.py
+++ b/pcs/test/test_lib_cib_tools.py
@@ -355,55 +355,158 @@ class GetPacemakerVersionByWhichCibWasValidatedTest(TestCase):
         )
 
 
+@mock.patch("pcs.lib.cib.tools.get_cib_xml")
 @mock.patch("pcs.lib.cib.tools.upgrade_cib")
+@mock.patch("pcs.lib.cib.tools.upgrade_cib_file")
 class EnsureCibVersionTest(TestCase):
     def setUp(self):
         self.mock_runner = mock.MagicMock(spec_set=CommandRunner)
         self.cib = etree.XML('<cib validate-with="pacemaker-2.3.4"/>')
 
-    def test_same_version(self, mock_upgrade_cib):
+    def test_same_version_file(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
         self.assertTrue(
             lib.ensure_cib_version(
-                self.mock_runner, self.cib, (2, 3, 4)
+                self.mock_runner, self.cib, (2, 3, 4), False
             ) is None
         )
-        self.assertEqual(0, mock_upgrade_cib.run.call_count)
+        mock_upgrade_file.assert_not_called()
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
 
-    def test_higher_version(self, mock_upgrade_cib):
+    def test_same_version_live(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
         self.assertTrue(
             lib.ensure_cib_version(
-                self.mock_runner, self.cib, (2, 3, 3)
+                self.mock_runner, self.cib, (2, 3, 4), True
             ) is None
         )
-        self.assertEqual(0, mock_upgrade_cib.call_count)
+        mock_upgrade_file.assert_not_called()
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
 
-    def test_upgraded_same_version(self, mock_upgrade_cib):
-        upgraded_cib = etree.XML('<cib validate-with="pacemaker-2.3.5"/>')
-        mock_upgrade_cib.return_value = upgraded_cib
-        self.assertEqual(
-            upgraded_cib,
+    def test_higher_version_file(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        self.assertTrue(
             lib.ensure_cib_version(
-                self.mock_runner, self.cib, (2, 3, 5)
-            )
+                self.mock_runner, self.cib, (2, 3, 3), False
+            ) is None
         )
-        mock_upgrade_cib.assert_called_once_with(self.cib, self.mock_runner)
+        mock_upgrade_file.assert_not_called()
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
 
-    def test_upgraded_higher_version(self, mock_upgrade_cib):
-        upgraded_cib = etree.XML('<cib validate-with="pacemaker-2.3.6"/>')
-        mock_upgrade_cib.return_value = upgraded_cib
-        self.assertEqual(
-            upgraded_cib,
+    def test_higher_version_live(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        self.assertTrue(
             lib.ensure_cib_version(
-                self.mock_runner, self.cib, (2, 3, 5)
+                self.mock_runner, self.cib, (2, 3, 3), True
+            ) is None
+        )
+        mock_upgrade_file.assert_not_called()
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
+
+    def test_upgraded_same_version_file(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        upgraded_cib = '<cib validate-with="pacemaker-2.3.5"/>'
+        mock_upgrade_file.return_value = upgraded_cib
+        assert_xml_equal(
+            upgraded_cib,
+            etree.tostring(
+                lib.ensure_cib_version(
+                    self.mock_runner, self.cib, (2, 3, 5), False
+                )
+            ).decode()
+        )
+        mock_upgrade_file.assert_called_once_with(self.cib, self.mock_runner)
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
+
+    def test_upgraded_same_version_live(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        upgraded_cib = '<cib validate-with="pacemaker-2.3.5"/>'
+        mock_get_cib.return_value = upgraded_cib
+        assert_xml_equal(
+            upgraded_cib,
+            etree.tostring(
+                lib.ensure_cib_version(
+                    self.mock_runner, self.cib, (2, 3, 5), True
+                )
+            ).decode()
+        )
+        mock_upgrade_file.assert_not_called()
+        mock_upgrade.assert_called_once_with(self.mock_runner)
+        mock_get_cib.assert_called_once_with(self.mock_runner)
+
+    def test_upgraded_higher_version_file(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        upgraded_cib = '<cib validate-with="pacemaker-2.3.6"/>'
+        mock_upgrade_file.return_value = upgraded_cib
+        assert_xml_equal(
+            upgraded_cib,
+            etree.tostring(
+                lib.ensure_cib_version(
+                    self.mock_runner, self.cib, (2, 3, 5), False
+                )
+            ).decode()
+        )
+        mock_upgrade_file.assert_called_once_with(self.cib, self.mock_runner)
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
+
+    def test_upgraded_higher_version_live(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        upgraded_cib = '<cib validate-with="pacemaker-2.3.6"/>'
+        mock_get_cib.return_value = upgraded_cib
+        assert_xml_equal(
+            upgraded_cib,
+            etree.tostring(
+                lib.ensure_cib_version(
+                    self.mock_runner, self.cib, (2, 3, 5), True
+                )
+            ).decode()
+        )
+        mock_upgrade_file.assert_not_called()
+        mock_upgrade.assert_called_once_with(self.mock_runner)
+        mock_get_cib.assert_called_once_with(self.mock_runner)
+
+    def test_upgraded_lower_version_file(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        mock_upgrade_file.return_value = etree.tostring(self.cib).decode()
+        assert_raise_library_error(
+            lambda: lib.ensure_cib_version(
+                self.mock_runner, self.cib, (2, 3, 5), False
+            ),
+            (
+                severities.ERROR,
+                report_codes.CIB_UPGRADE_FAILED_TO_MINIMAL_REQUIRED_VERSION,
+                {
+                    "required_version": "2.3.5",
+                    "current_version": "2.3.4"
+                }
             )
         )
-        mock_upgrade_cib.assert_called_once_with(self.cib, self.mock_runner)
+        mock_upgrade_file.assert_called_once_with(self.cib, self.mock_runner)
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
 
-    def test_upgraded_lower_version(self, mock_upgrade_cib):
-        mock_upgrade_cib.return_value = self.cib
+    def test_upgraded_lower_version_live(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        mock_get_cib.return_value = etree.tostring(self.cib).decode()
         assert_raise_library_error(
             lambda: lib.ensure_cib_version(
-                self.mock_runner, self.cib, (2, 3, 5)
+                self.mock_runner, self.cib, (2, 3, 5), True
             ),
             (
                 severities.ERROR,
@@ -414,11 +517,34 @@ class EnsureCibVersionTest(TestCase):
                 }
             )
         )
-        mock_upgrade_cib.assert_called_once_with(self.cib, self.mock_runner)
+        mock_upgrade_file.assert_not_called()
+        mock_upgrade.assert_called_once_with(self.mock_runner)
+        mock_get_cib.assert_called_once_with(self.mock_runner)
+
+    def test_cib_parse_error(
+        self, mock_upgrade_file, mock_upgrade, mock_get_cib
+    ):
+        mock_upgrade_file.return_value = "not xml"
+        assert_raise_library_error(
+            lambda: lib.ensure_cib_version(
+                self.mock_runner, self.cib, (2, 3, 5), False
+            ),
+            (
+                severities.ERROR,
+                report_codes.CIB_UPGRADE_FAILED,
+                {
+                    "reason":
+                        "Start tag expected, '<' not found, line 1, column 1",
+                }
+            )
+        )
+        mock_upgrade_file.assert_called_once_with(self.cib, self.mock_runner)
+        mock_upgrade.assert_not_called()
+        mock_get_cib.assert_not_called()
 
 
 @mock.patch("tempfile.NamedTemporaryFile")
-class UpgradeCibTest(TestCase):
+class UpgradeCibFileTest(TestCase):
     def setUp(self):
         self.mock_runner = mock.MagicMock(spec_set=CommandRunner)
 
@@ -428,11 +554,9 @@ class UpgradeCibTest(TestCase):
         mock_file.read.return_value = "<cib/>"
         mock_named_file.return_value = mock_file
         self.mock_runner.run.return_value = ("", "", 0)
-        assert_xml_equal(
+        self.assertEqual(
             "<cib/>",
-            etree.tostring(
-                lib.upgrade_cib(etree.XML("<old_cib/>"), self.mock_runner)
-            ).decode()
+            lib.upgrade_cib_file(etree.XML("<old_cib/>"), self.mock_runner)
         )
         mock_named_file.assert_called_once_with("w+", suffix=".pcs")
         mock_file.write.assert_called_once_with("<old_cib/>")
@@ -454,7 +578,10 @@ class UpgradeCibTest(TestCase):
         mock_named_file.return_value = mock_file
         self.mock_runner.run.return_value = ("some info", "some error", 1)
         assert_raise_library_error(
-            lambda: lib.upgrade_cib(etree.XML("<old_cib/>"), self.mock_runner),
+            lambda: lib.upgrade_cib_file(
+                etree.XML("<old_cib/>"),
+                self.mock_runner
+            ),
             (
                 severities.ERROR,
                 report_codes.CIB_UPGRADE_FAILED,
@@ -475,36 +602,46 @@ class UpgradeCibTest(TestCase):
             env_extend={"CIB_file": "mock_file_name"}
         )
 
-    def test_unable_to_parse_upgraded_cib(self, mock_named_file):
-        mock_file = mock.MagicMock()
-        mock_file.name = "mock_file_name"
-        mock_file.read.return_value = "not xml"
-        mock_named_file.return_value = mock_file
-        self.mock_runner.run.return_value = ("", "", 0)
+
+class UpgradeCibTest(TestCase):
+    def setUp(self):
+        self.mock_runner = mock.MagicMock(spec_set=CommandRunner)
+
+    def test_success(self):
+        self.mock_runner.run.return_value = "", "", 0
+        lib.upgrade_cib(self.mock_runner)
+        self.mock_runner.run.assert_called_once_with(
+            ["/usr/sbin/cibadmin", "--upgrade", "--force"],
+            env_extend={}
+        )
+
+    def test_success_file(self):
+        self.mock_runner.run.return_value = "", "", 0
+        lib.upgrade_cib(self.mock_runner, rc("cib-empty.xml"))
+        self.mock_runner.run.assert_called_once_with(
+            ["/usr/sbin/cibadmin", "--upgrade", "--force"],
+            env_extend={
+                "CIB_file": rc("cib-empty.xml"),
+            }
+        )
+
+    def test_error(self):
+        error = "Call cib_upgrade failed (-62): Timer expired"
+        self.mock_runner.run.return_value = "", error, 62
         assert_raise_library_error(
-            lambda: lib.upgrade_cib(etree.XML("<old_cib/>"), self.mock_runner),
+            lambda: lib.upgrade_cib(self.mock_runner),
             (
                 severities.ERROR,
                 report_codes.CIB_UPGRADE_FAILED,
                 {
-                    "reason":
-                        "Start tag expected, '<' not found, line 1, column 1",
+                    "reason": error,
                 }
             )
         )
-        mock_named_file.assert_called_once_with("w+", suffix=".pcs")
-        mock_file.write.assert_called_once_with("<old_cib/>")
-        mock_file.flush.assert_called_once_with()
         self.mock_runner.run.assert_called_once_with(
-            [
-                join(settings.pacemaker_binaries, "cibadmin"),
-                "--upgrade",
-                "--force"
-            ],
-            env_extend={"CIB_file": "mock_file_name"}
+            ["/usr/sbin/cibadmin", "--upgrade", "--force"],
+            env_extend={}
         )
-        mock_file.seek.assert_called_once_with(0)
-        mock_file.read.assert_called_once_with()
 
 
 class EtreeElementAttributesToDictTest(TestCase):
diff --git a/pcs/test/test_lib_env.py b/pcs/test/test_lib_env.py
index 05c70d4..24c9d56 100644
--- a/pcs/test/test_lib_env.py
+++ b/pcs/test/test_lib_env.py
@@ -210,7 +210,8 @@ class LibraryEnvironmentTest(TestCase):
         env = LibraryEnvironment(self.mock_logger, self.mock_reporter)
         env.push_cib(etree.XML('<cib/>'))
         mock_replace_cib.assert_called_once_with(
-            "mock cmd runner", '<cib/>', False
+            "mock cmd runner",
+            '<cib/>'
         )
         self.assertEqual([], env.report_processor.report_item_list)
 
@@ -225,7 +226,8 @@ class LibraryEnvironmentTest(TestCase):
         env._cib_upgraded = True
         env.push_cib(etree.XML('<cib/>'))
         mock_replace_cib.assert_called_once_with(
-            "mock cmd runner", '<cib/>', True
+            "mock cmd runner",
+            '<cib/>'
         )
         assert_report_item_list_equal(
             env.report_processor.report_item_list,
@@ -235,6 +237,7 @@ class LibraryEnvironmentTest(TestCase):
                 {}
             )]
         )
+        self.assertFalse(env.cib_upgraded)
 
     @mock.patch("pcs.lib.env.qdevice_reload_on_nodes")
     @mock.patch("pcs.lib.env.check_corosync_offline_on_nodes")
diff --git a/pcs/test/test_lib_pacemaker.py b/pcs/test/test_lib_pacemaker.py
index 7ca7b77..ccccd75 100644
--- a/pcs/test/test_lib_pacemaker.py
+++ b/pcs/test/test_lib_pacemaker.py
@@ -244,27 +244,6 @@ class ReplaceCibConfigurationTest(LibraryPacemakerTest):
             stdin_string=xml
         )
 
-    def test_cib_upgraded(self):
-        xml = "<xml/>"
-        expected_stdout = "expected output"
-        expected_stderr = ""
-        expected_retval = 0
-        mock_runner = mock.MagicMock(spec_set=CommandRunner)
-        mock_runner.run.return_value = (
-            expected_stdout,
-            expected_stderr,
-            expected_retval
-        )
-
-        lib.replace_cib_configuration(
-            mock_runner, XmlManipulation.from_str(xml).tree, True
-        )
-
-        mock_runner.run.assert_called_once_with(
-            [self.path("cibadmin"), "--replace", "--verbose", "--xml-pipe"],
-            stdin_string=xml
-        )
-
     def test_error(self):
         xml = "<xml/>"
         expected_stdout = "expected output"
-- 
1.8.3.1

