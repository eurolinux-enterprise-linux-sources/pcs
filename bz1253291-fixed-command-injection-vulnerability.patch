From a71b3fa7548474a4d19c05098dfe3d5c7539eb0a Mon Sep 17 00:00:00 2001
From: Tomas Jelinek <tojeline@redhat.com>
Date: Thu, 13 Aug 2015 17:10:50 +0200
Subject: [PATCH] fixed command injection vulnerability

---
 pcsd/fenceagent.rb | 34 ++++++++++++++++++++--------------
 pcsd/remote.rb     |  1 +
 pcsd/resource.rb   | 11 ++++++-----
 3 files changed, 27 insertions(+), 19 deletions(-)

diff --git a/pcsd/fenceagent.rb b/pcsd/fenceagent.rb
index 4cf77ee..7701b87 100644
--- a/pcsd/fenceagent.rb
+++ b/pcsd/fenceagent.rb
@@ -19,15 +19,31 @@ def getFenceAgents(fence_agent = nil)
 end
 
 def getFenceAgentMetadata(fenceagentname)
+  short_desc = ""
+  long_desc = ""
+  options_required = {}
+  options_optional = {}
+  options_advanced = {
+      "timeout" => "",
+      "priority" => "",
+      "pcmk_host_argument" => "",
+      "pcmk_host_map" => "",
+      "pcmk_host_list" => "",
+      "pcmk_host_check" => ""
+  }
+
   # There are bugs in stonith_admin & the new fence_agents interaction
   # eventually we'll want to switch back to this, but for now we directly
   # call the agent to get metadata
   #metadata = `stonith_admin --metadata -a #{fenceagentname}`
-  metadata = `/usr/sbin/#{fenceagentname} -o metadata`
-  doc = REXML::Document.new(metadata)
+  if not fenceagentname.start_with?('fence_') or fenceagentname.include?('/')
+    return [options_required, options_optional, options_advanced, [short_desc, long_desc]]
+  end
+  stdout, stderr, retval = run_cmd(
+    "/usr/sbin/#{fenceagentname}", '-o', 'metadata'
+  )
+  doc = REXML::Document.new(stdout.join)
 
-  short_desc = ""
-  long_desc = ""
   if doc.root
     short_desc = doc.root.attributes["shortdesc"]
   end
@@ -40,16 +56,6 @@ def getFenceAgentMetadata(fenceagentname)
     long_desc = ld.text ? ld.text.strip : ld.text
   }
 
-  options_required = {}
-  options_optional = {}
-  options_advanced = {
-      "timeout" => "",
-      "priority" => "",
-      "pcmk_host_argument" => "",
-      "pcmk_host_map" => "",
-      "pcmk_host_list" => "",
-      "pcmk_host_check" => ""
-  }
   for a in ["reboot", "list", "status", "monitor", "off"]
     options_advanced["pcmk_" + a + "_action"] = ""
     options_advanced["pcmk_" + a + "_timeout"] = ""
diff --git a/pcsd/remote.rb b/pcsd/remote.rb
index f734b55..e5594d3 100644
--- a/pcsd/remote.rb
+++ b/pcsd/remote.rb
@@ -938,6 +938,7 @@ def resource_metadata (params)
   return 200 if not params[:resourcename] or params[:resourcename] == ""
   resource_name = params[:resourcename][params[:resourcename].rindex(':')+1..-1]
   class_provider = params[:resourcename][0,params[:resourcename].rindex(':')]
+  return [400, 'Invalid resource agent name'] if resource_name.include?('/')
 
   @resource = ResourceAgent.new(params[:resourcename])
   if class_provider == "ocf:heartbeat"
diff --git a/pcsd/resource.rb b/pcsd/resource.rb
index 1577e58..01b64fa 100644
--- a/pcsd/resource.rb
+++ b/pcsd/resource.rb
@@ -103,11 +103,12 @@ def getResourceOptions(resource_id,stonith=false)
 
   ret = {}
   if stonith
-    resource_options = `#{PCS} stonith show #{resource_id}`
+    command = [PCS, 'stonith', 'show', resource_id]
   else
-    resource_options = `#{PCS} resource show #{resource_id}`
+    command = [PCS, 'resource', 'show', resource_id]
   end
-  resource_options.each_line { |line|
+  stdout, stderr, retval = run_cmd(*command)
+  stdout.each { |line|
     keyval = line.strip.split(/: /,2)
     if keyval[0] == "Attributes" then
       options = keyval[1].split(/ /)
@@ -281,8 +282,8 @@ end
 
 def getResourceMetadata(resourcepath)
   ENV['OCF_ROOT'] = OCF_ROOT
-  metadata = `#{resourcepath} meta-data`
-  doc = REXML::Document.new(metadata)
+  stdout, stderr, retval = run_cmd(resourcepath, 'meta-data')
+  doc = REXML::Document.new(stdout.join)
   options_required = {}
   options_optional = {}
   long_desc = ""
-- 
1.9.1

