From efee7703bdf16105aae9bdeab277fc62ae76bcb1 Mon Sep 17 00:00:00 2001
From: Ivan Devat <idevat@redhat.com>
Date: Thu, 13 Oct 2016 15:30:22 +0200
Subject: [PATCH] disable booth and qdevice

---
 pcs/app.py              |  36 ++---
 pcs/cluster.py          |  16 +-
 pcs/pcs.8               | 125 ---------------
 pcs/status.py           |  50 +++---
 pcs/test/test_booth.py  | 419 ------------------------------------------------
 pcs/test/test_quorum.py | 397 ---------------------------------------------
 pcs/usage.py            | 399 ++++++++++++++++++++++-----------------------
 7 files changed, 245 insertions(+), 1197 deletions(-)
 delete mode 100644 pcs/test/test_booth.py
 delete mode 100644 pcs/test/test_quorum.py

diff --git a/pcs/app.py b/pcs/app.py
index 23bd24c..4f71156 100644
--- a/pcs/app.py
+++ b/pcs/app.py
@@ -13,15 +13,15 @@ logging.basicConfig()
 
 from pcs import (
     acl,
-    booth,
+    # booth,
     cluster,
     config,
     constraint,
     node,
     pcsd,
     prop,
-    qdevice,
-    quorum,
+    # qdevice,
+    # quorum,
     resource,
     settings,
     status,
@@ -190,26 +190,26 @@ def main(argv=None):
         "config": config.config_cmd,
         "pcsd": pcsd.pcsd_cmd,
         "node": node.node_cmd,
-        "quorum": lambda argv: quorum.quorum_cmd(
-            utils.get_library_wrapper(),
-            argv,
-            utils.get_modificators()
-        ),
-        "qdevice": lambda argv: qdevice.qdevice_cmd(
-            utils.get_library_wrapper(),
-            argv,
-            utils.get_modificators()
-        ),
+        # "quorum": lambda argv: quorum.quorum_cmd(
+        #     utils.get_library_wrapper(),
+        #     argv,
+        #     utils.get_modificators()
+        # ),
+        # "qdevice": lambda argv: qdevice.qdevice_cmd(
+        #     utils.get_library_wrapper(),
+        #     argv,
+        #     utils.get_modificators()
+        # ),
         "alert": lambda args: alert.alert_cmd(
             utils.get_library_wrapper(),
             args,
             utils.get_modificators()
         ),
-        "booth": lambda argv: booth.booth_cmd(
-            utils.get_library_wrapper(),
-            argv,
-            utils.get_modificators()
-        ),
+        # "booth": lambda argv: booth.booth_cmd(
+        #     utils.get_library_wrapper(),
+        #     argv,
+        #     utils.get_modificators()
+        # ),
     }
     if command not in cmd_map:
         usage.main()
diff --git a/pcs/cluster.py b/pcs/cluster.py
index e352b16..ef22ea3 100644
--- a/pcs/cluster.py
+++ b/pcs/cluster.py
@@ -26,7 +26,7 @@ from pcs import (
     constraint,
     node,
     pcsd,
-    quorum,
+    # quorum,
     resource,
     settings,
     status,
@@ -144,12 +144,12 @@ def cluster_cmd(argv):
         cluster_verify(argv)
     elif (sub_cmd == "report"):
         cluster_report(argv)
-    elif (sub_cmd == "quorum"):
-        if argv and argv[0] == "unblock":
-            quorum.quorum_unblock_cmd(argv[1:])
-        else:
-            usage.cluster()
-            sys.exit(1)
+    # elif (sub_cmd == "quorum"):
+    #     if argv and argv[0] == "unblock":
+    #         quorum.quorum_unblock_cmd(argv[1:])
+    #     else:
+    #         usage.cluster()
+    #         sys.exit(1)
     else:
         usage.cluster()
         sys.exit(1)
@@ -1211,7 +1211,7 @@ def kill_cluster(argv):
         "cib",
         "pacemakerd",
         "pacemaker_remoted",
-        "corosync-qdevice",
+        # "corosync-qdevice",
         "corosync",
     ]
     dummy_output, dummy_retval = utils.run(["killall", "-9"] + daemons)
diff --git a/pcs/pcs.8 b/pcs/pcs.8
index 0a53287..3bce618 100644
--- a/pcs/pcs.8
+++ b/pcs/pcs.8
@@ -39,15 +39,6 @@ Set pacemaker properties.
 acl
 Set pacemaker access control lists.
 .TP
-qdevice
-Manage quorum device provider on the local host.
-.TP
-quorum
-Manage cluster quorum settings.
-.TP
-booth
-Manage booth (cluster ticket manager).
-.TP
 status
 View cluster status.
 .TP
@@ -522,116 +513,6 @@ where duration options and date spec options are: hours, monthdays, weekdays, ye
 .TP
 rule remove <rule id>
 Remove a rule if a rule id is specified, if rule is last rule in its constraint, the constraint will be removed.
-.SS "qdevice"
-.TP
-status <device model> [\fB\-\-full\fR] [<cluster name>]
-Show runtime status of specified model of quorum device provider.  Using \fB\-\-full\fR will give more detailed output.  If <cluster name> is specified, only information about the specified cluster will be displayed.
-.TP
-setup model <device model> [\fB\-\-enable\fR] [\fB\-\-start\fR]
-Configure specified model of quorum device provider.  Quorum device then can be added to clusters by running "pcs quorum device add" command in a cluster.  \fB\-\-start\fR will also start the provider.  \fB\-\-enable\fR will configure the provider to start on boot.
-.TP
-destroy <device model>
-Disable and stop specified model of quorum device provider and delete its configuration files.
-.TP
-start <device model>
-Start specified model of quorum device provider.
-.TP
-stop <device model>
-Stop specified model of quorum device provider.
-.TP
-kill <device model>
-Force specified model of quorum device provider to stop (performs kill \-9).  Note that init system (e.g. systemd) can detect that the qdevice is not running and start it again.  If you want to stop the qdevice, run "pcs qdevice stop" command.
-.TP
-enable <device model>
-Configure specified model of quorum device provider to start on boot.
-.TP
-disable <device model>
-Configure specified model of quorum device provider to not start on boot.
-.SS "quorum"
-.TP
-[config]
-Show quorum configuration.
-.TP
-status
-Show quorum runtime status.
-.TP
-device add [<generic options>] model <device model> [<model options>]
-Add a quorum device to the cluster.  Quorum device needs to be created first by "pcs qdevice setup" command.  It is not possible to use more than one quorum device in a cluster simultaneously.  Generic options, model and model options are all documented in corosync's corosync\-qdevice(8) man page.
-.TP
-device remove
-Remove a quorum device from the cluster.
-.TP
-device status [\fB\-\-full\fR]
-Show quorum device runtime status.  Using \fB\-\-full\fR will give more detailed output.
-.TP
-device update [<generic options>] [model <model options>]
-Add/Change quorum device options.  Generic options and model options are all documented in corosync's corosync\-qdevice(8) man page.  Requires the cluster to be stopped.
-
-WARNING: If you want to change "host" option of qdevice model net, use "pcs quorum device remove" and "pcs quorum device add" commands to set up configuration properly unless old and new host is the same machine.
-.TP
-expected\-votes <votes>
-Set expected votes in the live cluster to specified value.  This only affects the live cluster, not changes any configuration files.
-.TP
-unblock [\fB\-\-force\fR]
-Cancel waiting for all nodes when establishing quorum.  Useful in situations where you know the cluster is inquorate, but you are confident that the cluster should proceed with resource management regardless.  This command should ONLY be used when nodes which the cluster is waiting for have been confirmed to be powered off and to have no access to shared resources.
-
-.B WARNING: If the nodes are not actually powered off or they do have access to shared resources, data corruption/cluster failure can occur. To prevent accidental running of this command, \-\-force or interactive user response is required in order to proceed.
-.TP
-update [auto_tie_breaker=[0|1]] [last_man_standing=[0|1]] [last_man_standing_window=[<time in ms>]] [wait_for_all=[0|1]]
-Add/Change quorum options.  At least one option must be specified.  Options are documented in corosync's votequorum(5) man page.  Requires the cluster to be stopped.
-.SS "booth"
-.TP
-setup sites <address> <address> [<address>...] [arbitrators <address> ...] [\fB\-\-force\fR]
-Write new booth configuration with specified sites and arbitrators.  Total number of peers (sites and arbitrators) must be odd.  When the configuration file already exists, command fails unless \fB\-\-force\fR is specified.
-.TP
-destroy
-Remove booth configuration files.
-.TP
-ticket add <ticket> [<name>=<value> ...]
-Add new ticket to the current configuration. Ticket options are specified in booth manpage.
-
-.TP
-ticket remove <ticket>
-Remove the specified ticket from the current configuration.
-.TP
-config [<node>]
-Show booth configuration from the specified node or from the current node if node not specified.
-.TP
-create ip <address>
-Make the cluster run booth service on the specified ip address as a cluster resource.  Typically this is used to run booth site.
-.TP
-remove
-Remove booth resources created by the "pcs booth create" command.
-.TP
-restart
-Restart booth resources created by the "pcs booth create" command.
-.TP
-ticket grant <ticket> [<site address>]
-Grant the ticket for the site specified by address.  Site address which has been specified with 'pcs booth create' command is used if 'site address' is omitted.  Specifying site address is mandatory when running this command on an arbitrator.
-.TP
-ticket revoke <ticket> [<site address>]
-Revoke the ticket for the site specified by address.  Site address which has been specified with 'pcs booth create' command is used if 'site address' is omitted.  Specifying site address is mandatory when running this command on an arbitrator.
-.TP
-status
-Print current status of booth on the local node.
-.TP
-pull <node>
-Pull booth configuration from the specified node.
-.TP
-sync [\fB\-\-skip\-offline\fR]
-Send booth configuration from the local node to all nodes in the cluster.
-.TP
-enable
-Enable booth arbitrator service.
-.TP
-disable
-Disable booth arbitrator service.
-.TP
-start
-Start booth arbitrator service.
-.TP
-stop
-Stop booth arbitrator service.
 .SS "status"
 .TP
 [status] [\fB\-\-full\fR | \fB\-\-hide\-inactive\fR]
@@ -649,12 +530,6 @@ View current cluster status.
 corosync
 View current membership information as seen by corosync.
 .TP
-quorum
-View current quorum status.
-.TP
-qdevice <device model> [\fB\-\-full\fR] [<cluster name>]
-Show runtime status of specified model of quorum device provider.  Using \fB\-\-full\fR will give more detailed output.  If <cluster name> is specified, only information about the specified cluster will be displayed.
-.TP
 nodes [corosync|both|config]
 View current status of nodes from pacemaker. If 'corosync' is specified, print nodes currently configured in corosync, if 'both' is specified, print nodes from both corosync & pacemaker.  If 'config' is specified, print nodes from corosync & pacemaker configuration.
 .TP
diff --git a/pcs/status.py b/pcs/status.py
index 86216ea..ea160d5 100644
--- a/pcs/status.py
+++ b/pcs/status.py
@@ -13,9 +13,9 @@ from pcs import (
     usage,
     utils,
 )
-from pcs.qdevice import qdevice_status_cmd
-from pcs.quorum import quorum_status_cmd
-from pcs.cli.common.errors import CmdLineInputError
+# from pcs.qdevice import qdevice_status_cmd
+# from pcs.quorum import quorum_status_cmd
+# from pcs.cli.common.errors import CmdLineInputError
 from pcs.lib.errors import LibraryError
 from pcs.lib.pacemaker_state import ClusterState
 
@@ -41,28 +41,28 @@ def status_cmd(argv):
         xml_status()
     elif (sub_cmd == "corosync"):
         corosync_status()
-    elif sub_cmd == "qdevice":
-        try:
-            qdevice_status_cmd(
-                utils.get_library_wrapper(),
-                argv,
-                utils.get_modificators()
-            )
-        except LibraryError as e:
-            utils.process_library_reports(e.args)
-        except CmdLineInputError as e:
-            utils.exit_on_cmdline_input_errror(e, "status", sub_cmd)
-    elif sub_cmd == "quorum":
-        try:
-            quorum_status_cmd(
-                utils.get_library_wrapper(),
-                argv,
-                utils.get_modificators()
-            )
-        except LibraryError as e:
-            utils.process_library_reports(e.args)
-        except CmdLineInputError as e:
-            utils.exit_on_cmdline_input_errror(e, "status", sub_cmd)
+    # elif sub_cmd == "qdevice":
+    #     try:
+    #         qdevice_status_cmd(
+    #             utils.get_library_wrapper(),
+    #             argv,
+    #             utils.get_modificators()
+    #         )
+    #     except LibraryError as e:
+    #         utils.process_library_reports(e.args)
+    #     except CmdLineInputError as e:
+    #         utils.exit_on_cmdline_input_errror(e, "status", sub_cmd)
+    # elif sub_cmd == "quorum":
+    #     try:
+    #         quorum_status_cmd(
+    #             utils.get_library_wrapper(),
+    #             argv,
+    #             utils.get_modificators()
+    #         )
+    #     except LibraryError as e:
+    #         utils.process_library_reports(e.args)
+    #     except CmdLineInputError as e:
+    #         utils.exit_on_cmdline_input_errror(e, "status", sub_cmd)
     else:
         usage.status()
         sys.exit(1)
diff --git a/pcs/test/test_booth.py b/pcs/test/test_booth.py
deleted file mode 100644
index 2a445e1..0000000
--- a/pcs/test/test_booth.py
+++ /dev/null
@@ -1,419 +0,0 @@
-from __future__ import (
-    absolute_import,
-    division,
-    print_function,
-    unicode_literals,
-)
-
-import os
-import shutil
-
-from pcs.test.tools import pcs_unittest as unittest
-from pcs.test.tools.assertions import AssertPcsMixin, console_report
-from pcs.test.tools.misc import get_test_resource as rc
-from pcs.test.tools.pcs_runner import PcsRunner
-
-
-EMPTY_CIB = rc("cib-empty.xml")
-TEMP_CIB = rc("temp-cib.xml")
-
-BOOTH_CONFIG_FILE = rc("temp-booth.cfg")
-BOOTH_KEY_FILE = rc("temp-booth.key")
-
-BOOTH_RESOURCE_AGENT_INSTALLED = os.path.exists(
-    "/usr/lib/ocf/resource.d/pacemaker/booth-site"
-)
-need_booth_resource_agent = unittest.skipUnless(
-    BOOTH_RESOURCE_AGENT_INSTALLED,
-    "test requires resource agent ocf:pacemaker:booth-site"
-    " which is not istalled"
-)
-
-
-def fake_file(command):
-    return "{0} --booth-conf={1} --booth-key={2}".format(
-        command,
-        BOOTH_CONFIG_FILE,
-        BOOTH_KEY_FILE,
-    )
-
-def ensure_booth_config_exists():
-    if not os.path.exists(BOOTH_CONFIG_FILE):
-        with open(BOOTH_CONFIG_FILE, "w") as config_file:
-            config_file.write("")
-
-def ensure_booth_config_not_exists():
-    if os.path.exists(BOOTH_CONFIG_FILE):
-        os.remove(BOOTH_CONFIG_FILE)
-    if os.path.exists(BOOTH_KEY_FILE):
-        os.remove(BOOTH_KEY_FILE)
-
-class BoothMixin(AssertPcsMixin):
-    def setUp(self):
-        shutil.copy(EMPTY_CIB, TEMP_CIB)
-        self.pcs_runner = PcsRunner(TEMP_CIB)
-
-    def assert_pcs_success(self, command, *args, **kwargs):
-        return super(BoothMixin, self).assert_pcs_success(
-            fake_file(command), *args, **kwargs
-        )
-
-    def assert_pcs_fail(self, command, *args, **kwargs):
-        return super(BoothMixin, self).assert_pcs_fail(
-            fake_file(command), *args, **kwargs
-        )
-
-    def assert_pcs_fail_original(self, *args, **kwargs):
-        return super(BoothMixin, self).assert_pcs_fail(*args, **kwargs)
-
-class SetupTest(BoothMixin, unittest.TestCase):
-    def test_sucess_setup_booth_config(self):
-        ensure_booth_config_not_exists()
-        self.assert_pcs_success(
-            "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3"
-        )
-        self.assert_pcs_success(
-            "booth config",
-            stdout_full=console_report(
-                "authfile = {0}".format(BOOTH_KEY_FILE),
-                "site = 1.1.1.1",
-                "site = 2.2.2.2",
-                "arbitrator = 3.3.3.3",
-            )
-        )
-        with open(BOOTH_KEY_FILE) as key_file:
-            self.assertEqual(64, len(key_file.read()))
-
-
-    def test_fail_when_config_exists_already(self):
-        ensure_booth_config_exists()
-        try:
-            self.assert_pcs_fail(
-                "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3",
-                (
-                    "Error: booth config file {0} already exists, use --force"
-                    " to override\n"
-                ).format(BOOTH_CONFIG_FILE)
-            )
-        finally:
-            if os.path.exists(BOOTH_CONFIG_FILE):
-                os.remove(BOOTH_CONFIG_FILE)
-
-    def test_warn_when_config_file_exists_already_but_is_forced(self):
-        ensure_booth_config_exists()
-        self.assert_pcs_success(
-            "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3 --force",
-            stdout_full=[
-                "Warning: booth config file"
-                    " {0} already exists".format(BOOTH_CONFIG_FILE)
-                ,
-                "Warning: booth key file"
-                    " {0} already exists".format(BOOTH_KEY_FILE)
-                ,
-            ]
-        )
-        ensure_booth_config_not_exists()
-
-
-    def test_fail_on_multiple_reasons(self):
-        self.assert_pcs_fail(
-            "booth setup sites 1.1.1.1 arbitrators 1.1.1.1 2.2.2.2 3.3.3.3",
-            console_report(
-                "Error: lack of sites for booth configuration (need 2 at least)"
-                    ": sites 1.1.1.1"
-                ,
-                "Error: odd number of peers is required (entered 4 peers)",
-                "Error: duplicate address for booth configuration: 1.1.1.1",
-            )
-        )
-
-    def test_refuse_partialy_mocked_environment(self):
-        self.assert_pcs_fail_original(
-            "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3"
-                " --booth-conf=/some/file" #no --booth-key!
-            ,
-            "Error: With --booth-conf must be specified --booth-key as well\n"
-        )
-        self.assert_pcs_fail_original(
-            "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3"
-                " --booth-key=/some/file" #no --booth-conf!
-            ,
-            "Error: With --booth-key must be specified --booth-conf as well\n"
-        )
-
-    def test_show_usage_when_no_site_specified(self):
-        self.assert_pcs_fail("booth setup arbitrators 3.3.3.3", stdout_start=[
-            "",
-            "Usage: pcs booth <command>"
-        ])
-
-
-class DestroyTest(BoothMixin, unittest.TestCase):
-    def test_failed_when_using_mocked_booth_env(self):
-        self.assert_pcs_fail(
-            "booth destroy",
-            "Error: This command does not support --booth-conf, --booth-key\n"
-        )
-
-    @need_booth_resource_agent
-    def test_failed_when_booth_in_cib(self):
-        ensure_booth_config_not_exists()
-        name = " --name=some-weird-booth-name"
-        self.assert_pcs_success(
-            "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3" + name
-        )
-        self.assert_pcs_success("booth create ip 1.1.1.1" + name)
-        self.assert_pcs_fail_original(
-            "booth destroy" + name,
-            #If there is booth@some-weird-booth-name in systemd (enabled or
-            #started) the message continue with it because destroy command works
-            #always on live environment. "Cleaner" solution takes more effort
-            #than what it's worth
-            stdout_start=(
-                "Error: booth instance 'some-weird-booth-name' is used in"
-                " cluster resource\n"
-            ),
-        )
-
-class BoothTest(unittest.TestCase, BoothMixin):
-    def setUp(self):
-        shutil.copy(EMPTY_CIB, TEMP_CIB)
-        self.pcs_runner = PcsRunner(TEMP_CIB)
-        ensure_booth_config_not_exists()
-        self.assert_pcs_success(
-            "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3"
-        )
-
-class AddTicketTest(BoothTest):
-    def test_success_add_ticket(self):
-        self.assert_pcs_success("booth ticket add TicketA expire=10")
-        self.assert_pcs_success("booth config", stdout_full=console_report(
-            "authfile = {0}".format(BOOTH_KEY_FILE),
-            "site = 1.1.1.1",
-            "site = 2.2.2.2",
-            "arbitrator = 3.3.3.3",
-            'ticket = "TicketA"',
-            "  expire = 10",
-        ))
-
-    def test_fail_on_bad_ticket_name(self):
-        self.assert_pcs_fail(
-            "booth ticket add @TicketA",
-            "Error: booth ticket name '@TicketA' is not valid, use alphanumeric"
-            " chars or dash\n"
-        )
-
-    def test_fail_on_duplicit_ticket_name(self):
-        self.assert_pcs_success("booth ticket add TicketA")
-        self.assert_pcs_fail(
-            "booth ticket add TicketA",
-            "Error: booth ticket name 'TicketA' already exists in configuration"
-            "\n"
-        )
-
-    def test_fail_on_invalid_options(self):
-        self.assert_pcs_fail(
-            "booth ticket add TicketA site=a timeout=", console_report(
-                "Error: invalid booth ticket option 'site', allowed options"
-                    " are: acquire-after, attr-prereq, before-acquire-handler,"
-                    " expire, renewal-freq, retries, timeout, weights"
-                ,
-                "Error: '' is not a valid timeout value, use no-empty",
-            )
-        )
-
-    def test_forceable_fail_on_unknown_options(self):
-        msg = (
-            "invalid booth ticket option 'unknown', allowed options"
-            " are: acquire-after, attr-prereq, before-acquire-handler,"
-            " expire, renewal-freq, retries, timeout, weights"
-        )
-        self.assert_pcs_fail(
-            "booth ticket add TicketA unknown=a", console_report(
-                "Error: "+msg+", use --force to override",
-            )
-        )
-        self.assert_pcs_success(
-            "booth ticket add TicketA unknown=a --force",
-            "Warning: {0}\n".format(msg),
-        )
-
-
-class RemoveTicketTest(BoothTest):
-    def test_success_remove_ticket(self):
-        self.assert_pcs_success("booth ticket add TicketA")
-        self.assert_pcs_success("booth config", stdout_full=console_report(
-            "authfile = {0}".format(BOOTH_KEY_FILE),
-            "site = 1.1.1.1",
-            "site = 2.2.2.2",
-            "arbitrator = 3.3.3.3",
-            'ticket = "TicketA"',
-        ))
-        self.assert_pcs_success("booth ticket remove TicketA")
-        self.assert_pcs_success("booth config", stdout_full=console_report(
-            "authfile = {0}".format(BOOTH_KEY_FILE),
-            "site = 1.1.1.1",
-            "site = 2.2.2.2",
-            "arbitrator = 3.3.3.3",
-        ))
-
-    def test_fail_when_ticket_does_not_exist(self):
-        self.assert_pcs_fail(
-            "booth ticket remove TicketA",
-            "Error: booth ticket name 'TicketA' does not exist\n"
-        )
-
-@need_booth_resource_agent
-class CreateTest(BoothTest):
-    def test_sucessfully_create_booth_resource_group(self):
-        self.assert_pcs_success("resource show", "NO resources configured\n")
-        self.assert_pcs_success("booth create ip 192.168.122.120")
-        self.assert_pcs_success("resource show", [
-             " Resource Group: booth-booth-group",
-             "     booth-booth-ip	(ocf::heartbeat:IPaddr2):	Stopped",
-             "     booth-booth-service	(ocf::pacemaker:booth-site):	Stopped",
-        ])
-        self.assert_pcs_success("resource show booth-booth-ip", [
-             " Resource: booth-booth-ip (class=ocf provider=heartbeat type=IPaddr2)",
-             "  Attributes: ip=192.168.122.120",
-             "  Operations: start interval=0s timeout=20s (booth-booth-ip-start-interval-0s)",
-             "              stop interval=0s timeout=20s (booth-booth-ip-stop-interval-0s)",
-             "              monitor interval=10s timeout=20s (booth-booth-ip-monitor-interval-10s)",
-        ])
-
-    def test_refuse_create_booth_when_config_is_already_in_use(self):
-        self.assert_pcs_success("booth create ip 192.168.122.120")
-        self.assert_pcs_fail("booth create ip 192.168.122.121", [
-            "Error: booth instance 'booth' is already created as cluster"
-                " resource"
-        ])
-
-@need_booth_resource_agent
-class RemoveTest(BoothTest):
-    def test_failed_when_no_booth_configuration_created(self):
-        self.assert_pcs_success("resource show", "NO resources configured\n")
-        self.assert_pcs_fail("booth remove", [
-            "Error: booth instance 'booth' not found in cib"
-        ])
-
-    def test_failed_when_multiple_booth_configuration_created(self):
-        self.assert_pcs_success("resource show", "NO resources configured\n")
-        self.assert_pcs_success("booth create ip 192.168.122.120")
-        self.assert_pcs_success(
-            "resource create some-id ocf:pacemaker:booth-site"
-            " config=/etc/booth/booth.conf"
-        )
-        self.assert_pcs_success("resource show", [
-             " Resource Group: booth-booth-group",
-             "     booth-booth-ip	(ocf::heartbeat:IPaddr2):	Stopped",
-             "     booth-booth-service	(ocf::pacemaker:booth-site):	Stopped",
-             " some-id	(ocf::pacemaker:booth-site):	Stopped",
-        ])
-        self.assert_pcs_fail("booth remove", [
-            "Error: found more than one booth instance 'booth' in cib, use"
-            " --force to override"
-        ])
-
-    def test_remove_added_booth_configuration(self):
-        self.assert_pcs_success("resource show", "NO resources configured\n")
-        self.assert_pcs_success("booth create ip 192.168.122.120")
-        self.assert_pcs_success("resource show", [
-             " Resource Group: booth-booth-group",
-             "     booth-booth-ip	(ocf::heartbeat:IPaddr2):	Stopped",
-             "     booth-booth-service	(ocf::pacemaker:booth-site):	Stopped",
-        ])
-        self.assert_pcs_success("booth remove", [
-            "Deleting Resource - booth-booth-ip",
-            "Deleting Resource (and group) - booth-booth-service",
-        ])
-        self.assert_pcs_success("resource show", "NO resources configured\n")
-
-
-    def test_remove_multiple_booth_configuration(self):
-        self.assert_pcs_success("resource show", "NO resources configured\n")
-        self.assert_pcs_success("booth create ip 192.168.122.120")
-        self.assert_pcs_success(
-            "resource create some-id ocf:pacemaker:booth-site"
-            " config=/etc/booth/booth.conf"
-        )
-        self.assert_pcs_success("resource show", [
-             " Resource Group: booth-booth-group",
-             "     booth-booth-ip	(ocf::heartbeat:IPaddr2):	Stopped",
-             "     booth-booth-service	(ocf::pacemaker:booth-site):	Stopped",
-             " some-id	(ocf::pacemaker:booth-site):	Stopped",
-        ])
-        self.assert_pcs_success("booth remove --force", [
-            "Warning: found more than one booth instance 'booth' in cib",
-            "Deleting Resource - booth-booth-ip",
-            "Deleting Resource (and group) - booth-booth-service",
-            "Deleting Resource - some-id",
-        ])
-
-
-class TicketGrantTest(BoothTest):
-    def test_failed_when_implicit_site_but_not_correct_confgiuration_in_cib(
-        self
-    ):
-        self.assert_pcs_success("booth ticket add T1")
-        #no resource in cib
-        self.assert_pcs_fail("booth ticket grant T1", [
-            "Error: cannot determine local site ip, please specify site"
-                " parameter"
-            ,
-        ])
-
-class TicketRevokeTest(BoothTest):
-    def test_failed_when_implicit_site_but_not_correct_confgiuration_in_cib(
-        self
-    ):
-        self.assert_pcs_success("booth ticket add T1")
-        #no resource in cib
-        self.assert_pcs_fail("booth ticket revoke T1", [
-            "Error: cannot determine local site ip, please specify site"
-                " parameter"
-            ,
-        ])
-
-class ConfigTest(unittest.TestCase, BoothMixin):
-    def setUp(self):
-        shutil.copy(EMPTY_CIB, TEMP_CIB)
-        self.pcs_runner = PcsRunner(TEMP_CIB)
-
-    def test_fail_when_config_file_do_not_exists(self):
-        ensure_booth_config_not_exists()
-        self.assert_pcs_fail(
-            "booth config",
-            "Error: Booth config file '{0}' does not exist\n".format(
-                BOOTH_CONFIG_FILE
-            )
-        )
-
-    def test_too_much_args(self):
-        self.assert_pcs_fail(
-            "booth config nodename surplus",
-            stdout_start="\nUsage: pcs booth <command>\n    config ["
-        )
-
-    def test_show_unsupported_values(self):
-        ensure_booth_config_not_exists()
-        self.assert_pcs_success(
-            "booth setup sites 1.1.1.1 2.2.2.2 arbitrators 3.3.3.3"
-        )
-        with open(BOOTH_CONFIG_FILE, "a") as config_file:
-            config_file.write("some = nonsense")
-        self.assert_pcs_success("booth ticket add TicketA")
-        with open(BOOTH_CONFIG_FILE, "a") as config_file:
-            config_file.write("another = nonsense")
-
-        self.assert_pcs_success(
-            "booth config",
-            stdout_full="\n".join((
-                "authfile = {0}".format(BOOTH_KEY_FILE),
-                "site = 1.1.1.1",
-                "site = 2.2.2.2",
-                "arbitrator = 3.3.3.3",
-                "some = nonsense",
-                'ticket = "TicketA"',
-                "another = nonsense",
-            ))
-        )
diff --git a/pcs/test/test_quorum.py b/pcs/test/test_quorum.py
deleted file mode 100644
index 4f15d7f..0000000
--- a/pcs/test/test_quorum.py
+++ /dev/null
@@ -1,397 +0,0 @@
-from __future__ import (
-    absolute_import,
-    division,
-    print_function,
-    unicode_literals,
-)
-
-import shutil
-from pcs.test.tools.pcs_unittest import TestCase
-
-from pcs.test.tools.assertions import AssertPcsMixin
-from pcs.test.tools.misc import (
-    get_test_resource as rc,
-)
-from pcs.test.tools.pcs_runner import PcsRunner
-
-
-coro_conf = rc("corosync.conf")
-coro_qdevice_conf = rc("corosync-3nodes-qdevice.conf")
-temp_conf = rc("corosync.conf.tmp")
-
-
-class TestBase(TestCase, AssertPcsMixin):
-    def setUp(self):
-        shutil.copy(coro_conf, temp_conf)
-        self.pcs_runner = PcsRunner(corosync_conf_file=temp_conf)
-
-    def fixture_conf_qdevice(self):
-        shutil.copy(coro_qdevice_conf, temp_conf)
-
-
-class QuorumConfigTest(TestBase):
-    def test_no_device(self):
-        self.assert_pcs_success(
-            "quorum config",
-            "Options:\n"
-        )
-
-    def test_with_device(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  Model: net
-    host: 127.0.0.1
-"""
-        )
-
-
-class QuorumUpdateTest(TestBase):
-    def test_no_options(self):
-        self.assert_pcs_fail(
-            "quorum update",
-            stdout_start="\nUsage: pcs quorum <command>\n    update "
-        )
-
-    def test_invalid_option(self):
-        self.assert_pcs_fail(
-            "quorum update nonsense=invalid",
-            "Error: invalid quorum option 'nonsense', allowed options are: "
-                + "auto_tie_breaker, last_man_standing, "
-                + "last_man_standing_window, wait_for_all\n"
-        )
-
-    def test_invalid_value(self):
-        self.assert_pcs_fail(
-            "quorum update wait_for_all=invalid",
-            "Error: 'invalid' is not a valid wait_for_all value, use 0, 1\n"
-        )
-
-    def test_success(self):
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-"""
-        )
-        self.assert_pcs_success(
-            "quorum update wait_for_all=1"
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-  wait_for_all: 1
-"""
-        )
-
-
-class DeviceAddTest(TestBase):
-    def test_no_model_keyword(self):
-        self.assert_pcs_fail(
-            "quorum device add option=value host=127.0.0.1",
-            stdout_start="\nUsage: pcs quorum <command>\n    device add "
-        )
-
-        self.assert_pcs_fail(
-            "quorum device add option=value host=127.0.0.1 --force",
-            stdout_start="\nUsage: pcs quorum <command>\n    device add "
-        )
-
-    def test_no_model_value(self):
-        self.assert_pcs_fail(
-            "quorum device add option=value model host=127.0.0.1",
-            stdout_start="\nUsage: pcs quorum <command>\n    device add "
-        )
-        self.assert_pcs_fail(
-            "quorum device add option=value model host=127.0.0.1 --force",
-            stdout_start="\nUsage: pcs quorum <command>\n    device add "
-        )
-
-    def test_more_models(self):
-        self.assert_pcs_fail(
-            "quorum device add model net host=127.0.0.1 model disk",
-            stdout_start="\nUsage: pcs quorum <command>\n    device add "
-        )
-        self.assert_pcs_fail(
-            "quorum device add model net host=127.0.0.1 model disk --force",
-            stdout_start="\nUsage: pcs quorum <command>\n    device add "
-        )
-
-    def test_model_in_options(self):
-        self.assert_pcs_fail(
-            "quorum device add model=disk model net host=127.0.0.1",
-            "Error: Model cannot be specified in generic options\n"
-        )
-        self.assert_pcs_fail(
-            "quorum device add model=disk model net host=127.0.0.1 --force",
-            "Error: Model cannot be specified in generic options\n"
-        )
-
-    def test_device_already_set(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_fail(
-            "quorum device add model net host=127.0.0.1",
-            "Error: quorum device is already defined\n"
-        )
-        self.assert_pcs_fail(
-            "quorum device add model net host=127.0.0.1 --force",
-            "Error: quorum device is already defined\n"
-        )
-
-    def test_success_model_only(self):
-        self.assert_pcs_success(
-            "quorum device add model net host=127.0.0.1 algorithm=lms"
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  Model: net
-    algorithm: lms
-    host: 127.0.0.1
-"""
-        )
-
-    def test_succes_generic_and_model_options(self):
-        self.assert_pcs_success(
-            "quorum device add timeout=12345 model net host=127.0.0.1 algorithm=ffsplit"
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  timeout: 12345
-  votes: 1
-  Model: net
-    algorithm: ffsplit
-    host: 127.0.0.1
-"""
-        )
-
-    def test_missing_required_options(self):
-        self.assert_pcs_fail(
-            "quorum device add model net",
-            """\
-Error: required option 'algorithm' is missing
-Error: required option 'host' is missing
-"""
-        )
-        self.assert_pcs_fail(
-            "quorum device add model net --force",
-            """\
-Error: required option 'algorithm' is missing
-Error: required option 'host' is missing
-"""
-        )
-
-    def test_bad_options(self):
-        self.assert_pcs_fail(
-            "quorum device add a=b timeout=-1 model net host=127.0.0.1 algorithm=x c=d",
-            """\
-Error: 'x' is not a valid algorithm value, use ffsplit, lms, use --force to override
-Error: invalid quorum device model option 'c', allowed options are: algorithm, connect_timeout, force_ip_version, host, port, tie_breaker, use --force to override
-Error: invalid quorum device option 'a', allowed options are: sync_timeout, timeout, use --force to override
-Error: '-1' is not a valid timeout value, use positive integer, use --force to override
-"""
-        )
-
-        self.assert_pcs_success(
-            "quorum device add a=b timeout=-1 model net host=127.0.0.1 algorithm=x c=d --force",
-            """\
-Warning: 'x' is not a valid algorithm value, use ffsplit, lms
-Warning: invalid quorum device model option 'c', allowed options are: algorithm, connect_timeout, force_ip_version, host, port, tie_breaker
-Warning: invalid quorum device option 'a', allowed options are: sync_timeout, timeout
-Warning: '-1' is not a valid timeout value, use positive integer
-"""
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  a: b
-  timeout: -1
-  Model: net
-    algorithm: x
-    c: d
-    host: 127.0.0.1
-"""
-        )
-
-    def test_bad_model(self):
-        self.assert_pcs_fail(
-            "quorum device add model invalid x=y",
-            "Error: 'invalid' is not a valid model value, use net, use --force to override\n"
-        )
-        self.assert_pcs_success(
-            "quorum device add model invalid x=y --force",
-            "Warning: 'invalid' is not a valid model value, use net\n"
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  Model: invalid
-    x: y
-"""
-        )
-
-
-class DeviceRemoveTest(TestBase):
-    def test_no_device(self):
-        self.assert_pcs_fail(
-            "quorum device remove",
-            "Error: no quorum device is defined in this cluster\n"
-        )
-        self.assert_pcs_fail(
-            "quorum device remove --force",
-            "Error: no quorum device is defined in this cluster\n"
-        )
-
-    def test_success(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_success(
-            "quorum device remove"
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            "Options:\n"
-        )
-
-    def test_bad_options(self):
-        self.assert_pcs_fail(
-            "quorum device remove net",
-            stdout_start="\nUsage: pcs quorum <command>\n    device remove\n"
-        )
-        self.assert_pcs_fail(
-            "quorum device remove net --force",
-            stdout_start="\nUsage: pcs quorum <command>\n    device remove\n"
-        )
-
-
-class DeviceUpdateTest(TestBase):
-    def test_no_device(self):
-        self.assert_pcs_fail(
-            "quorum device update option=new_value model host=127.0.0.2",
-            "Error: no quorum device is defined in this cluster\n"
-        )
-        self.assert_pcs_fail(
-            "quorum device update option=new_value model host=127.0.0.2 --force",
-            "Error: no quorum device is defined in this cluster\n"
-        )
-
-    def test_generic_options_change(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_success("quorum device update timeout=12345")
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  timeout: 12345
-  Model: net
-    host: 127.0.0.1
-"""
-        )
-
-    def test_model_options_change(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_success("quorum device update model host=127.0.0.2")
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  Model: net
-    host: 127.0.0.2
-"""
-        )
-
-    def test_both_options_change(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_success(
-            "quorum device update timeout=12345 model host=127.0.0.2 port=1"
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  timeout: 12345
-  Model: net
-    host: 127.0.0.2
-    port: 1
-"""
-        )
-
-    def test_more_models(self):
-        self.assert_pcs_fail(
-            "quorum device update model host=127.0.0.2 model port=1",
-            stdout_start="\nUsage: pcs quorum <command>\n    device update "
-        )
-        self.assert_pcs_fail(
-            "quorum device update model host=127.0.0.2 model port=1 --force",
-            stdout_start="\nUsage: pcs quorum <command>\n    device update "
-        )
-
-    def test_model_in_options(self):
-        self.assert_pcs_fail(
-            "quorum device update model=disk",
-            "Error: Model cannot be specified in generic options\n"
-        )
-        self.assert_pcs_fail(
-            "quorum device update model=disk --force",
-            "Error: Model cannot be specified in generic options\n"
-        )
-
-    def test_missing_required_options(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_fail(
-            "quorum device update model host=",
-            "Error: required option 'host' is missing\n"
-        )
-        self.assert_pcs_fail(
-            "quorum device update model host= --force",
-            "Error: required option 'host' is missing\n"
-        )
-
-    def test_bad_options(self):
-        self.fixture_conf_qdevice()
-        self.assert_pcs_fail(
-            "quorum device update a=b timeout=-1 model port=x c=d",
-            """\
-Error: invalid quorum device model option 'c', allowed options are: algorithm, connect_timeout, force_ip_version, host, port, tie_breaker, use --force to override
-Error: 'x' is not a valid port value, use 1-65535, use --force to override
-Error: invalid quorum device option 'a', allowed options are: sync_timeout, timeout, use --force to override
-Error: '-1' is not a valid timeout value, use positive integer, use --force to override
-"""
-        )
-        self.assert_pcs_success(
-            "quorum device update a=b timeout=-1 model port=x c=d --force",
-            """\
-Warning: invalid quorum device model option 'c', allowed options are: algorithm, connect_timeout, force_ip_version, host, port, tie_breaker
-Warning: 'x' is not a valid port value, use 1-65535
-Warning: invalid quorum device option 'a', allowed options are: sync_timeout, timeout
-Warning: '-1' is not a valid timeout value, use positive integer
-"""
-        )
-        self.assert_pcs_success(
-            "quorum config",
-            """\
-Options:
-Device:
-  a: b
-  timeout: -1
-  Model: net
-    c: d
-    host: 127.0.0.1
-    port: x
-"""
-        )
diff --git a/pcs/usage.py b/pcs/usage.py
index 9ee6189..8954483 100644
--- a/pcs/usage.py
+++ b/pcs/usage.py
@@ -19,9 +19,9 @@ def full_usage():
     out += strip_extras(constraint([],False))
     out += strip_extras(node([],False))
     out += strip_extras(acl([],False))
-    out += strip_extras(qdevice([],False))
-    out += strip_extras(quorum([],False))
-    out += strip_extras(booth([],False))
+    # out += strip_extras(qdevice([],False))
+    # out += strip_extras(quorum([],False))
+    # out += strip_extras(booth([],False))
     out += strip_extras(status([],False))
     out += strip_extras(config([],False))
     out += strip_extras(pcsd([],False))
@@ -111,14 +111,14 @@ def generate_completion_tree_from_usage():
     tree["property"] = generate_tree(property([],False))
     tree["acl"] = generate_tree(acl([],False))
     tree["constraint"] = generate_tree(constraint([],False))
-    tree["qdevice"] = generate_tree(qdevice([],False))
-    tree["quorum"] = generate_tree(quorum([],False))
+    # tree["qdevice"] = generate_tree(qdevice([],False))
+    # tree["quorum"] = generate_tree(quorum([],False))
     tree["status"] = generate_tree(status([],False))
     tree["config"] = generate_tree(config([],False))
     tree["pcsd"] = generate_tree(pcsd([],False))
     tree["node"] = generate_tree(node([], False))
     tree["alert"] = generate_tree(alert([], False))
-    tree["booth"] = generate_tree(booth([], False))
+    # tree["booth"] = generate_tree(booth([], False))
     return tree
 
 def generate_tree(usage_txt):
@@ -167,9 +167,6 @@ Commands:
     constraint  Set resource constraints.
     property    Set pacemaker properties.
     acl         Set pacemaker access control lists.
-    qdevice     Manage quorum device provider.
-    quorum      Manage cluster quorum settings.
-    booth       Manage booth (cluster ticket manager).
     status      View cluster status.
     config      View and manage cluster configuration.
     pcsd        Manage pcs daemon.
@@ -1136,14 +1133,6 @@ Commands:
     corosync
         View current membership information as seen by corosync.
 
-    quorum
-        View current quorum status.
-
-    qdevice <device model> [--full] [<cluster name>]
-        Show runtime status of specified model of quorum device provider.  Using
-        --full will give more detailed output.  If <cluster name> is specified,
-        only information about the specified cluster will be displayed.
-
     nodes [corosync|both|config]
         View current status of nodes from pacemaker. If 'corosync' is
         specified, print nodes currently configured in corosync, if 'both'
@@ -1315,191 +1304,191 @@ Commands:
     else:
         return output
 
-def qdevice(args=[], pout=True):
-    output = """
-Usage: pcs qdevice <command>
-Manage quorum device provider on the local host, currently only 'net' model is
-supported.
-
-Commands:
-    status <device model> [--full] [<cluster name>]
-        Show runtime status of specified model of quorum device provider.  Using
-        --full will give more detailed output.  If <cluster name> is specified,
-        only information about the specified cluster will be displayed.
-
-    setup model <device model> [--enable] [--start]
-        Configure specified model of quorum device provider.  Quorum device then
-        can be added to clusters by running "pcs quorum device add" command
-        in a cluster.  --start will also start the provider.  --enable will
-        configure the provider to start on boot.
-
-    destroy <device model>
-        Disable and stop specified model of quorum device provider and delete
-        its configuration files.
-
-    start <device model>
-        Start specified model of quorum device provider.
-
-    stop <device model>
-        Stop specified model of quorum device provider.
-
-    kill <device model>
-        Force specified model of quorum device provider to stop (performs kill
-        -9).  Note that init system (e.g. systemd) can detect that the qdevice
-        is not running and start it again.  If you want to stop the qdevice, run
-        "pcs qdevice stop" command.
-
-    enable <device model>
-        Configure specified model of quorum device provider to start on boot.
-
-    disable <device model>
-        Configure specified model of quorum device provider to not start
-        on boot.
-"""
-    if pout:
-        print(sub_usage(args, output))
-    else:
-        return output
-
-def quorum(args=[], pout=True):
-    output = """
-Usage: pcs quorum <command>
-Manage cluster quorum settings.
-
-Commands:
-    [config]
-        Show quorum configuration.
-
-    status
-        Show quorum runtime status.
-
-    device add [<generic options>] model <device model> [<model options>]
-        Add a quorum device to the cluster.  Quorum device needs to be created
-        first by "pcs qdevice setup" command.  It is not possible to use more
-        than one quorum device in a cluster simultaneously.  Generic options,
-        model and model options are all documented in corosync's
-        corosync-qdevice(8) man page.
-
-    device remove
-        Remove a quorum device from the cluster.
-
-    device status [--full]
-        Show quorum device runtime status.  Using --full will give more detailed
-        output.
-
-    device update [<generic options>] [model <model options>]
-        Add/Change quorum device options.  Generic options and model options are
-        all documented in corosync's corosync-qdevice(8) man page.  Requires
-        the cluster to be stopped.
-
-        WARNING: If you want to change "host" option of qdevice model net, use
-        "pcs quorum device remove" and "pcs quorum device add" commands
-        to set up configuration properly unless old and new host is the same
-        machine.
-
-    expected-votes <votes>
-        Set expected votes in the live cluster to specified value.  This only
-        affects the live cluster, not changes any configuration files.
-
-    unblock [--force]
-        Cancel waiting for all nodes when establishing quorum.  Useful in
-        situations where you know the cluster is inquorate, but you are
-        confident that the cluster should proceed with resource management
-        regardless.  This command should ONLY be used when nodes which
-        the cluster is waiting for have been confirmed to be powered off and
-        to have no access to shared resources.
-
-        WARNING: If the nodes are not actually powered off or they do have
-        access to shared resources, data corruption/cluster failure can occur.
-        To prevent accidental running of this command, --force or interactive
-        user response is required in order to proceed.
-
-    update [auto_tie_breaker=[0|1]] [last_man_standing=[0|1]]
-            [last_man_standing_window=[<time in ms>]] [wait_for_all=[0|1]]
-        Add/Change quorum options.  At least one option must be specified.
-        Options are documented in corosync's votequorum(5) man page.  Requires
-        the cluster to be stopped.
-"""
-    if pout:
-        print(sub_usage(args, output))
-    else:
-        return output
-
-def booth(args=[], pout=True):
-    output = """
-Usage: pcs booth <command>
-Manage booth (cluster ticket manager)
-
-Commands:
-    setup sites <address> <address> [<address>...] [arbitrators <address> ...]
-            [--force]
-        Write new booth configuration with specified sites and arbitrators.
-        Total number of peers (sites and arbitrators) must be odd.  When
-        the configuration file already exists, command fails unless --force
-        is specified.
-
-    destroy
-        Remove booth configuration files.
-
-    ticket add <ticket> [<name>=<value> ...]
-        Add new ticket to the current configuration. Ticket options are
-        specified in booth manpage.
-
-    ticket remove <ticket>
-        Remove the specified ticket from the current configuration.
-
-    config [<node>]
-        Show booth configuration from the specified node or from the current
-        node if node not specified.
-
-    create ip <address>
-        Make the cluster run booth service on the specified ip address as
-        a cluster resource.  Typically this is used to run booth site.
-
-    remove
-        Remove booth resources created by the "pcs booth create" command.
-
-    restart
-        Restart booth resources created by the "pcs booth create" command.
-
-    ticket grant <ticket> [<site address>]
-        Grant the ticket for the site specified by address.  Site address which
-        has been specified with 'pcs booth create' command is used if
-        'site address' is omitted.  Specifying site address is mandatory when
-        running this command on an arbitrator.
-
-    ticket revoke <ticket> [<site address>]
-        Revoke the ticket for the site specified by address.  Site address which
-        has been specified with 'pcs booth create' command is used if
-        'site address' is omitted.  Specifying site address is mandatory when
-        running this command on an arbitrator.
-
-    status
-        Print current status of booth on the local node.
-
-    pull <node>
-        Pull booth configuration from the specified node.
-
-    sync [--skip-offline]
-        Send booth configuration from the local node to all nodes
-        in the cluster.
-
-    enable
-        Enable booth arbitrator service.
-
-    disable
-        Disable booth arbitrator service.
-
-    start
-        Start booth arbitrator service.
-
-    stop
-        Stop booth arbitrator service.
-"""
-    if pout:
-        print(sub_usage(args, output))
-    else:
-        return output
+# def qdevice(args=[], pout=True):
+#     output = """
+# Usage: pcs qdevice <command>
+# Manage quorum device provider on the local host, currently only 'net' model is
+# supported.
+#
+# Commands:
+#     status <device model> [--full] [<cluster name>]
+#         Show runtime status of specified model of quorum device provider.  Using
+#         --full will give more detailed output.  If <cluster name> is specified,
+#         only information about the specified cluster will be displayed.
+#
+#     setup model <device model> [--enable] [--start]
+#         Configure specified model of quorum device provider.  Quorum device then
+#         can be added to clusters by running "pcs quorum device add" command
+#         in a cluster.  --start will also start the provider.  --enable will
+#         configure the provider to start on boot.
+#
+#     destroy <device model>
+#         Disable and stop specified model of quorum device provider and delete
+#         its configuration files.
+#
+#     start <device model>
+#         Start specified model of quorum device provider.
+#
+#     stop <device model>
+#         Stop specified model of quorum device provider.
+#
+#     kill <device model>
+#         Force specified model of quorum device provider to stop (performs kill
+#         -9).  Note that init system (e.g. systemd) can detect that the qdevice
+#         is not running and start it again.  If you want to stop the qdevice, run
+#         "pcs qdevice stop" command.
+#
+#     enable <device model>
+#         Configure specified model of quorum device provider to start on boot.
+#
+#     disable <device model>
+#         Configure specified model of quorum device provider to not start
+#         on boot.
+# """
+#     if pout:
+#         print(sub_usage(args, output))
+#     else:
+#         return output
+
+# def quorum(args=[], pout=True):
+#     output = """
+# Usage: pcs quorum <command>
+# Manage cluster quorum settings.
+#
+# Commands:
+#     [config]
+#         Show quorum configuration.
+#
+#     status
+#         Show quorum runtime status.
+#
+#     device add [<generic options>] model <device model> [<model options>]
+#         Add a quorum device to the cluster.  Quorum device needs to be created
+#         first by "pcs qdevice setup" command.  It is not possible to use more
+#         than one quorum device in a cluster simultaneously.  Generic options,
+#         model and model options are all documented in corosync's
+#         corosync-qdevice(8) man page.
+#
+#     device remove
+#         Remove a quorum device from the cluster.
+#
+#     device status [--full]
+#         Show quorum device runtime status.  Using --full will give more detailed
+#         output.
+#
+#     device update [<generic options>] [model <model options>]
+#         Add/Change quorum device options.  Generic options and model options are
+#         all documented in corosync's corosync-qdevice(8) man page.  Requires
+#         the cluster to be stopped.
+#
+#         WARNING: If you want to change "host" option of qdevice model net, use
+#         "pcs quorum device remove" and "pcs quorum device add" commands
+#         to set up configuration properly unless old and new host is the same
+#         machine.
+#
+#     expected-votes <votes>
+#         Set expected votes in the live cluster to specified value.  This only
+#         affects the live cluster, not changes any configuration files.
+#
+#     unblock [--force]
+#         Cancel waiting for all nodes when establishing quorum.  Useful in
+#         situations where you know the cluster is inquorate, but you are
+#         confident that the cluster should proceed with resource management
+#         regardless.  This command should ONLY be used when nodes which
+#         the cluster is waiting for have been confirmed to be powered off and
+#         to have no access to shared resources.
+#
+#         WARNING: If the nodes are not actually powered off or they do have
+#         access to shared resources, data corruption/cluster failure can occur.
+#         To prevent accidental running of this command, --force or interactive
+#         user response is required in order to proceed.
+#
+#     update [auto_tie_breaker=[0|1]] [last_man_standing=[0|1]]
+#             [last_man_standing_window=[<time in ms>]] [wait_for_all=[0|1]]
+#         Add/Change quorum options.  At least one option must be specified.
+#         Options are documented in corosync's votequorum(5) man page.  Requires
+#         the cluster to be stopped.
+# """
+#     if pout:
+#         print(sub_usage(args, output))
+#     else:
+#         return output
+
+# def booth(args=[], pout=True):
+#     output = """
+# Usage: pcs booth <command>
+# Manage booth (cluster ticket manager)
+#
+# Commands:
+#     setup sites <address> <address> [<address>...] [arbitrators <address> ...]
+#             [--force]
+#         Write new booth configuration with specified sites and arbitrators.
+#         Total number of peers (sites and arbitrators) must be odd.  When
+#         the configuration file already exists, command fails unless --force
+#         is specified.
+#
+#     destroy
+#         Remove booth configuration files.
+#
+#     ticket add <ticket> [<name>=<value> ...]
+#         Add new ticket to the current configuration. Ticket options are
+#         specified in booth manpage.
+#
+#     ticket remove <ticket>
+#         Remove the specified ticket from the current configuration.
+#
+#     config [<node>]
+#         Show booth configuration from the specified node or from the current
+#         node if node not specified.
+#
+#     create ip <address>
+#         Make the cluster run booth service on the specified ip address as
+#         a cluster resource.  Typically this is used to run booth site.
+#
+#     remove
+#         Remove booth resources created by the "pcs booth create" command.
+#
+#     restart
+#         Restart booth resources created by the "pcs booth create" command.
+#
+#     ticket grant <ticket> [<site address>]
+#         Grant the ticket for the site specified by address.  Site address which
+#         has been specified with 'pcs booth create' command is used if
+#         'site address' is omitted.  Specifying site address is mandatory when
+#         running this command on an arbitrator.
+#
+#     ticket revoke <ticket> [<site address>]
+#         Revoke the ticket for the site specified by address.  Site address which
+#         has been specified with 'pcs booth create' command is used if
+#         'site address' is omitted.  Specifying site address is mandatory when
+#         running this command on an arbitrator.
+#
+#     status
+#         Print current status of booth on the local node.
+#
+#     pull <node>
+#         Pull booth configuration from the specified node.
+#
+#     sync [--skip-offline]
+#         Send booth configuration from the local node to all nodes
+#         in the cluster.
+#
+#     enable
+#         Enable booth arbitrator service.
+#
+#     disable
+#         Disable booth arbitrator service.
+#
+#     start
+#         Start booth arbitrator service.
+#
+#     stop
+#         Stop booth arbitrator service.
+# """
+#     if pout:
+#         print(sub_usage(args, output))
+#     else:
+#         return output
 
 
 def alert(args=[], pout=True):
@@ -1552,9 +1541,9 @@ def show(main_usage_name, rest_usage_names):
         "node": node,
         "pcsd": pcsd,
         "property": property,
-        "qdevice": qdevice,
-        "quorum": quorum,
-        "booth": booth,
+        # "qdevice": qdevice,
+        # "quorum": quorum,
+        # "booth": booth,
         "resource": resource,
         "status": status,
         "stonith": stonith,
-- 
1.8.3.1

